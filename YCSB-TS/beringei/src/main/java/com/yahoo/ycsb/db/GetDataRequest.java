package com.yahoo.ycsb.db; /**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class GetDataRequest implements TBase, java.io.Serializable, Cloneable, Comparable<GetDataRequest> {
  private static final TStruct STRUCT_DESC = new TStruct("GetDataRequest");
  private static final TField KEYS_FIELD_DESC = new TField("keys", TType.LIST, (short)1);
  private static final TField BEGIN_FIELD_DESC = new TField("begin", TType.I64, (short)2);
  private static final TField END_FIELD_DESC = new TField("end", TType.I64, (short)3);

  public List<Key> keys;
  public long begin;
  public long end;
  public static final int KEYS = 1;
  public static final int BEGIN = 2;
  public static final int END = 3;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __BEGIN_ISSET_ID = 0;
  private static final int __END_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(KEYS, new FieldMetaData("keys", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, Key.class))));
    tmpMetaDataMap.put(BEGIN, new FieldMetaData("begin", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(END, new FieldMetaData("end", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(GetDataRequest.class, metaDataMap);
  }

  public GetDataRequest() {
  }

  public GetDataRequest(
    List<Key> keys,
    long begin,
    long end)
  {
    this();
    this.keys = keys;
    this.begin = begin;
    setBeginIsSet(true);
    this.end = end;
    setEndIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetDataRequest(GetDataRequest other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetKeys()) {
      this.keys = TBaseHelper.deepCopy(other.keys);
    }
    this.begin = TBaseHelper.deepCopy(other.begin);
    this.end = TBaseHelper.deepCopy(other.end);
  }

  public GetDataRequest deepCopy() {
    return new GetDataRequest(this);
  }

  @Deprecated
  public GetDataRequest clone() {
    return new GetDataRequest(this);
  }

  public List<Key>  getKeys() {
    return this.keys;
  }

  public GetDataRequest setKeys(List<Key> keys) {
    this.keys = keys;
    return this;
  }

  public void unsetKeys() {
    this.keys = null;
  }

  // Returns true if field keys is set (has been assigned a value) and false otherwise
  public boolean isSetKeys() {
    return this.keys != null;
  }

  public void setKeysIsSet(boolean value) {
    if (!value) {
      this.keys = null;
    }
  }

  public long  getBegin() {
    return this.begin;
  }

  public GetDataRequest setBegin(long begin) {
    this.begin = begin;
    setBeginIsSet(true);
    return this;
  }

  public void unsetBegin() {
    __isset_bit_vector.clear(__BEGIN_ISSET_ID);
  }

  // Returns true if field begin is set (has been assigned a value) and false otherwise
  public boolean isSetBegin() {
    return __isset_bit_vector.get(__BEGIN_ISSET_ID);
  }

  public void setBeginIsSet(boolean value) {
    __isset_bit_vector.set(__BEGIN_ISSET_ID, value);
  }

  public long  getEnd() {
    return this.end;
  }

  public GetDataRequest setEnd(long end) {
    this.end = end;
    setEndIsSet(true);
    return this;
  }

  public void unsetEnd() {
    __isset_bit_vector.clear(__END_ISSET_ID);
  }

  // Returns true if field end is set (has been assigned a value) and false otherwise
  public boolean isSetEnd() {
    return __isset_bit_vector.get(__END_ISSET_ID);
  }

  public void setEndIsSet(boolean value) {
    __isset_bit_vector.set(__END_ISSET_ID, value);
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case KEYS:
      if (value == null) {
        unsetKeys();
      } else {
        setKeys((List<Key>)value);
      }
      break;

    case BEGIN:
      if (value == null) {
        unsetBegin();
      } else {
        setBegin((Long)value);
      }
      break;

    case END:
      if (value == null) {
        unsetEnd();
      } else {
        setEnd((Long)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case KEYS:
      return getKeys();

    case BEGIN:
      return new Long(getBegin());

    case END:
      return new Long(getEnd());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case KEYS:
      return isSetKeys();
    case BEGIN:
      return isSetBegin();
    case END:
      return isSetEnd();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetDataRequest)
      return this.equals((GetDataRequest)that);
    return false;
  }

  public boolean equals(GetDataRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_keys = true && this.isSetKeys();
    boolean that_present_keys = true && that.isSetKeys();
    if (this_present_keys || that_present_keys) {
      if (!(this_present_keys && that_present_keys))
        return false;
      if (!TBaseHelper.equalsNobinary(this.keys, that.keys))
        return false;
    }

    boolean this_present_begin = true;
    boolean that_present_begin = true;
    if (this_present_begin || that_present_begin) {
      if (!(this_present_begin && that_present_begin))
        return false;
      if (!TBaseHelper.equalsNobinary(this.begin, that.begin))
        return false;
    }

    boolean this_present_end = true;
    boolean that_present_end = true;
    if (this_present_end || that_present_end) {
      if (!(this_present_end && that_present_end))
        return false;
      if (!TBaseHelper.equalsNobinary(this.end, that.end))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(GetDataRequest other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetKeys()).compareTo(other.isSetKeys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(keys, other.keys);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetBegin()).compareTo(other.isSetBegin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(begin, other.begin);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetEnd()).compareTo(other.isSetEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(end, other.end);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case KEYS:
          if (field.type == TType.LIST) {
            {
              TList _list4 = iprot.readListBegin();
              this.keys = new ArrayList<Key>(Math.max(0, _list4.size));
              for (int _i5 = 0; 
                   (_list4.size < 0) ? iprot.peekList() : (_i5 < _list4.size); 
                   ++_i5)
              {
                Key _elem6;
                _elem6 = new Key();
                _elem6.read(iprot);
                this.keys.add(_elem6);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BEGIN:
          if (field.type == TType.I64) {
            this.begin = iprot.readI64();
            setBeginIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case END:
          if (field.type == TType.I64) {
            this.end = iprot.readI64();
            setEndIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.keys != null) {
      oprot.writeFieldBegin(KEYS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.keys.size()));
        for (Key _iter7 : this.keys)        {
          _iter7.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(BEGIN_FIELD_DESC);
    oprot.writeI64(this.begin);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(END_FIELD_DESC);
    oprot.writeI64(this.end);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("GetDataRequest");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("keys");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getKeys() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getKeys(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("begin");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getBegin(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("end");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getEnd(), indent + 1, prettyPrint));
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

