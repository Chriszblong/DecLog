package com.yahoo.ycsb.db; /**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class ConfigurationInfo implements TBase, java.io.Serializable, Cloneable, Comparable<ConfigurationInfo> {
  private static final TStruct STRUCT_DESC = new TStruct("ConfigurationInfo");
  private static final TField SHARD_COUNT_FIELD_DESC = new TField("shardCount", TType.I32, (short)1);
  private static final TField SERVICE_MAP_FIELD_DESC = new TField("serviceMap", TType.LIST, (short)2);

  public int shardCount;
  public List<ServiceMap> serviceMap;
  public static final int SHARDCOUNT = 1;
  public static final int SERVICEMAP = 2;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __SHARDCOUNT_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(SHARDCOUNT, new FieldMetaData("shardCount", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(SERVICEMAP, new FieldMetaData("serviceMap", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, ServiceMap.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(ConfigurationInfo.class, metaDataMap);
  }

  public ConfigurationInfo() {
  }

  public ConfigurationInfo(
    int shardCount,
    List<ServiceMap> serviceMap)
  {
    this();
    this.shardCount = shardCount;
    setShardCountIsSet(true);
    this.serviceMap = serviceMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ConfigurationInfo(ConfigurationInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.shardCount = TBaseHelper.deepCopy(other.shardCount);
    if (other.isSetServiceMap()) {
      this.serviceMap = TBaseHelper.deepCopy(other.serviceMap);
    }
  }

  public ConfigurationInfo deepCopy() {
    return new ConfigurationInfo(this);
  }

  @Deprecated
  public ConfigurationInfo clone() {
    return new ConfigurationInfo(this);
  }

  public int  getShardCount() {
    return this.shardCount;
  }

  public ConfigurationInfo setShardCount(int shardCount) {
    this.shardCount = shardCount;
    setShardCountIsSet(true);
    return this;
  }

  public void unsetShardCount() {
    __isset_bit_vector.clear(__SHARDCOUNT_ISSET_ID);
  }

  // Returns true if field shardCount is set (has been assigned a value) and false otherwise
  public boolean isSetShardCount() {
    return __isset_bit_vector.get(__SHARDCOUNT_ISSET_ID);
  }

  public void setShardCountIsSet(boolean value) {
    __isset_bit_vector.set(__SHARDCOUNT_ISSET_ID, value);
  }

  public List<ServiceMap>  getServiceMap() {
    return this.serviceMap;
  }

  public ConfigurationInfo setServiceMap(List<ServiceMap> serviceMap) {
    this.serviceMap = serviceMap;
    return this;
  }

  public void unsetServiceMap() {
    this.serviceMap = null;
  }

  // Returns true if field serviceMap is set (has been assigned a value) and false otherwise
  public boolean isSetServiceMap() {
    return this.serviceMap != null;
  }

  public void setServiceMapIsSet(boolean value) {
    if (!value) {
      this.serviceMap = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case SHARDCOUNT:
      if (value == null) {
        unsetShardCount();
      } else {
        setShardCount((Integer)value);
      }
      break;

    case SERVICEMAP:
      if (value == null) {
        unsetServiceMap();
      } else {
        setServiceMap((List<ServiceMap>)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case SHARDCOUNT:
      return new Integer(getShardCount());

    case SERVICEMAP:
      return getServiceMap();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case SHARDCOUNT:
      return isSetShardCount();
    case SERVICEMAP:
      return isSetServiceMap();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ConfigurationInfo)
      return this.equals((ConfigurationInfo)that);
    return false;
  }

  public boolean equals(ConfigurationInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_shardCount = true;
    boolean that_present_shardCount = true;
    if (this_present_shardCount || that_present_shardCount) {
      if (!(this_present_shardCount && that_present_shardCount))
        return false;
      if (!TBaseHelper.equalsNobinary(this.shardCount, that.shardCount))
        return false;
    }

    boolean this_present_serviceMap = true && this.isSetServiceMap();
    boolean that_present_serviceMap = true && that.isSetServiceMap();
    if (this_present_serviceMap || that_present_serviceMap) {
      if (!(this_present_serviceMap && that_present_serviceMap))
        return false;
      if (!TBaseHelper.equalsNobinary(this.serviceMap, that.serviceMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ConfigurationInfo other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetShardCount()).compareTo(other.isSetShardCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(shardCount, other.shardCount);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetServiceMap()).compareTo(other.isSetServiceMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(serviceMap, other.serviceMap);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case SHARDCOUNT:
          if (field.type == TType.I32) {
            this.shardCount = iprot.readI32();
            setShardCountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SERVICEMAP:
          if (field.type == TType.LIST) {
            {
              TList _list40 = iprot.readListBegin();
              this.serviceMap = new ArrayList<ServiceMap>(Math.max(0, _list40.size));
              for (int _i41 = 0; 
                   (_list40.size < 0) ? iprot.peekList() : (_i41 < _list40.size); 
                   ++_i41)
              {
                ServiceMap _elem42;
                _elem42 = new ServiceMap();
                _elem42.read(iprot);
                this.serviceMap.add(_elem42);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(SHARD_COUNT_FIELD_DESC);
    oprot.writeI32(this.shardCount);
    oprot.writeFieldEnd();
    if (this.serviceMap != null) {
      oprot.writeFieldBegin(SERVICE_MAP_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.serviceMap.size()));
        for (ServiceMap _iter43 : this.serviceMap)        {
          _iter43.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("ConfigurationInfo");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("shardCount");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getShardCount(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("serviceMap");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getServiceMap() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getServiceMap(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

