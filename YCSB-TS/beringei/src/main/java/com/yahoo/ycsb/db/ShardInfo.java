package com.yahoo.ycsb.db; /**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class ShardInfo implements TBase, java.io.Serializable, Cloneable, Comparable<ShardInfo> {
  private static final TStruct STRUCT_DESC = new TStruct("ShardInfo");
  private static final TField SHARD_ID_FIELD_DESC = new TField("shardId", TType.I32, (short)1);
  private static final TField HOST_ADDRESS_FIELD_DESC = new TField("hostAddress", TType.STRING, (short)2);
  private static final TField PORT_FIELD_DESC = new TField("port", TType.I32, (short)3);

  public int shardId;
  public String hostAddress;
  public int port;
  public static final int SHARDID = 1;
  public static final int HOSTADDRESS = 2;
  public static final int PORT = 3;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __SHARDID_ISSET_ID = 0;
  private static final int __PORT_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(SHARDID, new FieldMetaData("shardId", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(HOSTADDRESS, new FieldMetaData("hostAddress", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(PORT, new FieldMetaData("port", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(ShardInfo.class, metaDataMap);
  }

  public ShardInfo() {
  }

  public ShardInfo(
    int shardId,
    String hostAddress,
    int port)
  {
    this();
    this.shardId = shardId;
    setShardIdIsSet(true);
    this.hostAddress = hostAddress;
    this.port = port;
    setPortIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ShardInfo(ShardInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.shardId = TBaseHelper.deepCopy(other.shardId);
    if (other.isSetHostAddress()) {
      this.hostAddress = TBaseHelper.deepCopy(other.hostAddress);
    }
    this.port = TBaseHelper.deepCopy(other.port);
  }

  public ShardInfo deepCopy() {
    return new ShardInfo(this);
  }

  @Deprecated
  public ShardInfo clone() {
    return new ShardInfo(this);
  }

  public int  getShardId() {
    return this.shardId;
  }

  public ShardInfo setShardId(int shardId) {
    this.shardId = shardId;
    setShardIdIsSet(true);
    return this;
  }

  public void unsetShardId() {
    __isset_bit_vector.clear(__SHARDID_ISSET_ID);
  }

  // Returns true if field shardId is set (has been assigned a value) and false otherwise
  public boolean isSetShardId() {
    return __isset_bit_vector.get(__SHARDID_ISSET_ID);
  }

  public void setShardIdIsSet(boolean value) {
    __isset_bit_vector.set(__SHARDID_ISSET_ID, value);
  }

  public String  getHostAddress() {
    return this.hostAddress;
  }

  public ShardInfo setHostAddress(String hostAddress) {
    this.hostAddress = hostAddress;
    return this;
  }

  public void unsetHostAddress() {
    this.hostAddress = null;
  }

  // Returns true if field hostAddress is set (has been assigned a value) and false otherwise
  public boolean isSetHostAddress() {
    return this.hostAddress != null;
  }

  public void setHostAddressIsSet(boolean value) {
    if (!value) {
      this.hostAddress = null;
    }
  }

  public int  getPort() {
    return this.port;
  }

  public ShardInfo setPort(int port) {
    this.port = port;
    setPortIsSet(true);
    return this;
  }

  public void unsetPort() {
    __isset_bit_vector.clear(__PORT_ISSET_ID);
  }

  // Returns true if field port is set (has been assigned a value) and false otherwise
  public boolean isSetPort() {
    return __isset_bit_vector.get(__PORT_ISSET_ID);
  }

  public void setPortIsSet(boolean value) {
    __isset_bit_vector.set(__PORT_ISSET_ID, value);
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case SHARDID:
      if (value == null) {
        unsetShardId();
      } else {
        setShardId((Integer)value);
      }
      break;

    case HOSTADDRESS:
      if (value == null) {
        unsetHostAddress();
      } else {
        setHostAddress((String)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((Integer)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case SHARDID:
      return new Integer(getShardId());

    case HOSTADDRESS:
      return getHostAddress();

    case PORT:
      return new Integer(getPort());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case SHARDID:
      return isSetShardId();
    case HOSTADDRESS:
      return isSetHostAddress();
    case PORT:
      return isSetPort();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ShardInfo)
      return this.equals((ShardInfo)that);
    return false;
  }

  public boolean equals(ShardInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_shardId = true;
    boolean that_present_shardId = true;
    if (this_present_shardId || that_present_shardId) {
      if (!(this_present_shardId && that_present_shardId))
        return false;
      if (!TBaseHelper.equalsNobinary(this.shardId, that.shardId))
        return false;
    }

    boolean this_present_hostAddress = true && this.isSetHostAddress();
    boolean that_present_hostAddress = true && that.isSetHostAddress();
    if (this_present_hostAddress || that_present_hostAddress) {
      if (!(this_present_hostAddress && that_present_hostAddress))
        return false;
      if (!TBaseHelper.equalsNobinary(this.hostAddress, that.hostAddress))
        return false;
    }

    boolean this_present_port = true;
    boolean that_present_port = true;
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (!TBaseHelper.equalsNobinary(this.port, that.port))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ShardInfo other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetShardId()).compareTo(other.isSetShardId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(shardId, other.shardId);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetHostAddress()).compareTo(other.isSetHostAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(hostAddress, other.hostAddress);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(port, other.port);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case SHARDID:
          if (field.type == TType.I32) {
            this.shardId = iprot.readI32();
            setShardIdIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case HOSTADDRESS:
          if (field.type == TType.STRING) {
            this.hostAddress = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PORT:
          if (field.type == TType.I32) {
            this.port = iprot.readI32();
            setPortIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(SHARD_ID_FIELD_DESC);
    oprot.writeI32(this.shardId);
    oprot.writeFieldEnd();
    if (this.hostAddress != null) {
      oprot.writeFieldBegin(HOST_ADDRESS_FIELD_DESC);
      oprot.writeString(this.hostAddress);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(PORT_FIELD_DESC);
    oprot.writeI32(this.port);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("ShardInfo");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("shardId");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getShardId(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("hostAddress");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getHostAddress() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getHostAddress(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("port");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getPort(), indent + 1, prettyPrint));
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

