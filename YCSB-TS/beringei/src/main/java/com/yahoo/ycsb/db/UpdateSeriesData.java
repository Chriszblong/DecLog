package com.yahoo.ycsb.db; /**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class UpdateSeriesData implements TBase, java.io.Serializable, Cloneable, Comparable<UpdateSeriesData> {
  private static final TStruct STRUCT_DESC = new TStruct("UpdateSeriesData");
  private static final TField KEY_FIELD_DESC = new TField("key", TType.STRUCT, (short)1);
  private static final TField DATA_FIELD_DESC = new TField("data", TType.LIST, (short)2);
  private static final TField BEGIN_FIELD_DESC = new TField("begin", TType.I64, (short)3);
  private static final TField END_FIELD_DESC = new TField("end", TType.I64, (short)4);

  public Key key;
  public List<TimeValueCategoryTuple> data;
  public long begin;
  public long end;
  public static final int KEY = 1;
  public static final int DATA = 2;
  public static final int BEGIN = 3;
  public static final int END = 4;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __BEGIN_ISSET_ID = 0;
  private static final int __END_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(KEY, new FieldMetaData("key", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, Key.class)));
    tmpMetaDataMap.put(DATA, new FieldMetaData("data", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, TimeValueCategoryTuple.class))));
    tmpMetaDataMap.put(BEGIN, new FieldMetaData("begin", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(END, new FieldMetaData("end", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(UpdateSeriesData.class, metaDataMap);
  }

  public UpdateSeriesData() {
  }

  public UpdateSeriesData(
    Key key,
    List<TimeValueCategoryTuple> data,
    long begin,
    long end)
  {
    this();
    this.key = key;
    this.data = data;
    this.begin = begin;
    setBeginIsSet(true);
    this.end = end;
    setEndIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UpdateSeriesData(UpdateSeriesData other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetKey()) {
      this.key = TBaseHelper.deepCopy(other.key);
    }
    if (other.isSetData()) {
      this.data = TBaseHelper.deepCopy(other.data);
    }
    this.begin = TBaseHelper.deepCopy(other.begin);
    this.end = TBaseHelper.deepCopy(other.end);
  }

  public UpdateSeriesData deepCopy() {
    return new UpdateSeriesData(this);
  }

  @Deprecated
  public UpdateSeriesData clone() {
    return new UpdateSeriesData(this);
  }

  public Key  getKey() {
    return this.key;
  }

  public UpdateSeriesData setKey(Key key) {
    this.key = key;
    return this;
  }

  public void unsetKey() {
    this.key = null;
  }

  // Returns true if field key is set (has been assigned a value) and false otherwise
  public boolean isSetKey() {
    return this.key != null;
  }

  public void setKeyIsSet(boolean value) {
    if (!value) {
      this.key = null;
    }
  }

  public List<TimeValueCategoryTuple>  getData() {
    return this.data;
  }

  public UpdateSeriesData setData(List<TimeValueCategoryTuple> data) {
    this.data = data;
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  // Returns true if field data is set (has been assigned a value) and false otherwise
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public long  getBegin() {
    return this.begin;
  }

  public UpdateSeriesData setBegin(long begin) {
    this.begin = begin;
    setBeginIsSet(true);
    return this;
  }

  public void unsetBegin() {
    __isset_bit_vector.clear(__BEGIN_ISSET_ID);
  }

  // Returns true if field begin is set (has been assigned a value) and false otherwise
  public boolean isSetBegin() {
    return __isset_bit_vector.get(__BEGIN_ISSET_ID);
  }

  public void setBeginIsSet(boolean value) {
    __isset_bit_vector.set(__BEGIN_ISSET_ID, value);
  }

  public long  getEnd() {
    return this.end;
  }

  public UpdateSeriesData setEnd(long end) {
    this.end = end;
    setEndIsSet(true);
    return this;
  }

  public void unsetEnd() {
    __isset_bit_vector.clear(__END_ISSET_ID);
  }

  // Returns true if field end is set (has been assigned a value) and false otherwise
  public boolean isSetEnd() {
    return __isset_bit_vector.get(__END_ISSET_ID);
  }

  public void setEndIsSet(boolean value) {
    __isset_bit_vector.set(__END_ISSET_ID, value);
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case KEY:
      if (value == null) {
        unsetKey();
      } else {
        setKey((Key)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((List<TimeValueCategoryTuple>)value);
      }
      break;

    case BEGIN:
      if (value == null) {
        unsetBegin();
      } else {
        setBegin((Long)value);
      }
      break;

    case END:
      if (value == null) {
        unsetEnd();
      } else {
        setEnd((Long)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case KEY:
      return getKey();

    case DATA:
      return getData();

    case BEGIN:
      return new Long(getBegin());

    case END:
      return new Long(getEnd());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case KEY:
      return isSetKey();
    case DATA:
      return isSetData();
    case BEGIN:
      return isSetBegin();
    case END:
      return isSetEnd();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UpdateSeriesData)
      return this.equals((UpdateSeriesData)that);
    return false;
  }

  public boolean equals(UpdateSeriesData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_key = true && this.isSetKey();
    boolean that_present_key = true && that.isSetKey();
    if (this_present_key || that_present_key) {
      if (!(this_present_key && that_present_key))
        return false;
      if (!TBaseHelper.equalsNobinary(this.key, that.key))
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!TBaseHelper.equalsNobinary(this.data, that.data))
        return false;
    }

    boolean this_present_begin = true;
    boolean that_present_begin = true;
    if (this_present_begin || that_present_begin) {
      if (!(this_present_begin && that_present_begin))
        return false;
      if (!TBaseHelper.equalsNobinary(this.begin, that.begin))
        return false;
    }

    boolean this_present_end = true;
    boolean that_present_end = true;
    if (this_present_end || that_present_end) {
      if (!(this_present_end && that_present_end))
        return false;
      if (!TBaseHelper.equalsNobinary(this.end, that.end))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UpdateSeriesData other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(key, other.key);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(data, other.data);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetBegin()).compareTo(other.isSetBegin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(begin, other.begin);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetEnd()).compareTo(other.isSetEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(end, other.end);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case KEY:
          if (field.type == TType.STRUCT) {
            this.key = new Key();
            this.key.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DATA:
          if (field.type == TType.LIST) {
            {
              TList _list44 = iprot.readListBegin();
              this.data = new ArrayList<TimeValueCategoryTuple>(Math.max(0, _list44.size));
              for (int _i45 = 0; 
                   (_list44.size < 0) ? iprot.peekList() : (_i45 < _list44.size); 
                   ++_i45)
              {
                TimeValueCategoryTuple _elem46;
                _elem46 = new TimeValueCategoryTuple();
                _elem46.read(iprot);
                this.data.add(_elem46);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BEGIN:
          if (field.type == TType.I64) {
            this.begin = iprot.readI64();
            setBeginIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case END:
          if (field.type == TType.I64) {
            this.end = iprot.readI64();
            setEndIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.key != null) {
      oprot.writeFieldBegin(KEY_FIELD_DESC);
      this.key.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.data != null) {
      oprot.writeFieldBegin(DATA_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.data.size()));
        for (TimeValueCategoryTuple _iter47 : this.data)        {
          _iter47.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(BEGIN_FIELD_DESC);
    oprot.writeI64(this.begin);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(END_FIELD_DESC);
    oprot.writeI64(this.end);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("UpdateSeriesData");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("key");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getKey() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getKey(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("data");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getData() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getData(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("begin");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getBegin(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("end");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getEnd(), indent + 1, prettyPrint));
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

