package com.yahoo.ycsb.db; /**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class ServiceMap implements TBase, java.io.Serializable, Cloneable, Comparable<ServiceMap> {
  private static final TStruct STRUCT_DESC = new TStruct("ServiceMap");
  private static final TField SERVICE_NAME_FIELD_DESC = new TField("serviceName", TType.STRING, (short)1);
  private static final TField LOCATION_FIELD_DESC = new TField("location", TType.STRING, (short)2);
  private static final TField IS_LOGGING_NEW_KEYS_ENABLED_FIELD_DESC = new TField("isLoggingNewKeysEnabled", TType.BOOL, (short)3);
  private static final TField SHARD_MAP_FIELD_DESC = new TField("shardMap", TType.LIST, (short)4);

  public String serviceName;
  public String location;
  public boolean isLoggingNewKeysEnabled;
  public List<ShardInfo> shardMap;
  public static final int SERVICENAME = 1;
  public static final int LOCATION = 2;
  public static final int ISLOGGINGNEWKEYSENABLED = 3;
  public static final int SHARDMAP = 4;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __ISLOGGINGNEWKEYSENABLED_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(SERVICENAME, new FieldMetaData("serviceName", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(LOCATION, new FieldMetaData("location", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(ISLOGGINGNEWKEYSENABLED, new FieldMetaData("isLoggingNewKeysEnabled", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMetaDataMap.put(SHARDMAP, new FieldMetaData("shardMap", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, ShardInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(ServiceMap.class, metaDataMap);
  }

  public ServiceMap() {
  }

  public ServiceMap(
    String serviceName,
    String location,
    boolean isLoggingNewKeysEnabled,
    List<ShardInfo> shardMap)
  {
    this();
    this.serviceName = serviceName;
    this.location = location;
    this.isLoggingNewKeysEnabled = isLoggingNewKeysEnabled;
    setIsLoggingNewKeysEnabledIsSet(true);
    this.shardMap = shardMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ServiceMap(ServiceMap other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetServiceName()) {
      this.serviceName = TBaseHelper.deepCopy(other.serviceName);
    }
    if (other.isSetLocation()) {
      this.location = TBaseHelper.deepCopy(other.location);
    }
    this.isLoggingNewKeysEnabled = TBaseHelper.deepCopy(other.isLoggingNewKeysEnabled);
    if (other.isSetShardMap()) {
      this.shardMap = TBaseHelper.deepCopy(other.shardMap);
    }
  }

  public ServiceMap deepCopy() {
    return new ServiceMap(this);
  }

  @Deprecated
  public ServiceMap clone() {
    return new ServiceMap(this);
  }

  public String  getServiceName() {
    return this.serviceName;
  }

  public ServiceMap setServiceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  public void unsetServiceName() {
    this.serviceName = null;
  }

  // Returns true if field serviceName is set (has been assigned a value) and false otherwise
  public boolean isSetServiceName() {
    return this.serviceName != null;
  }

  public void setServiceNameIsSet(boolean value) {
    if (!value) {
      this.serviceName = null;
    }
  }

  public String  getLocation() {
    return this.location;
  }

  public ServiceMap setLocation(String location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  // Returns true if field location is set (has been assigned a value) and false otherwise
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public boolean  isIsLoggingNewKeysEnabled() {
    return this.isLoggingNewKeysEnabled;
  }

  public ServiceMap setIsLoggingNewKeysEnabled(boolean isLoggingNewKeysEnabled) {
    this.isLoggingNewKeysEnabled = isLoggingNewKeysEnabled;
    setIsLoggingNewKeysEnabledIsSet(true);
    return this;
  }

  public void unsetIsLoggingNewKeysEnabled() {
    __isset_bit_vector.clear(__ISLOGGINGNEWKEYSENABLED_ISSET_ID);
  }

  // Returns true if field isLoggingNewKeysEnabled is set (has been assigned a value) and false otherwise
  public boolean isSetIsLoggingNewKeysEnabled() {
    return __isset_bit_vector.get(__ISLOGGINGNEWKEYSENABLED_ISSET_ID);
  }

  public void setIsLoggingNewKeysEnabledIsSet(boolean value) {
    __isset_bit_vector.set(__ISLOGGINGNEWKEYSENABLED_ISSET_ID, value);
  }

  public List<ShardInfo>  getShardMap() {
    return this.shardMap;
  }

  public ServiceMap setShardMap(List<ShardInfo> shardMap) {
    this.shardMap = shardMap;
    return this;
  }

  public void unsetShardMap() {
    this.shardMap = null;
  }

  // Returns true if field shardMap is set (has been assigned a value) and false otherwise
  public boolean isSetShardMap() {
    return this.shardMap != null;
  }

  public void setShardMapIsSet(boolean value) {
    if (!value) {
      this.shardMap = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case SERVICENAME:
      if (value == null) {
        unsetServiceName();
      } else {
        setServiceName((String)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((String)value);
      }
      break;

    case ISLOGGINGNEWKEYSENABLED:
      if (value == null) {
        unsetIsLoggingNewKeysEnabled();
      } else {
        setIsLoggingNewKeysEnabled((Boolean)value);
      }
      break;

    case SHARDMAP:
      if (value == null) {
        unsetShardMap();
      } else {
        setShardMap((List<ShardInfo>)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case SERVICENAME:
      return getServiceName();

    case LOCATION:
      return getLocation();

    case ISLOGGINGNEWKEYSENABLED:
      return new Boolean(isIsLoggingNewKeysEnabled());

    case SHARDMAP:
      return getShardMap();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case SERVICENAME:
      return isSetServiceName();
    case LOCATION:
      return isSetLocation();
    case ISLOGGINGNEWKEYSENABLED:
      return isSetIsLoggingNewKeysEnabled();
    case SHARDMAP:
      return isSetShardMap();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ServiceMap)
      return this.equals((ServiceMap)that);
    return false;
  }

  public boolean equals(ServiceMap that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_serviceName = true && this.isSetServiceName();
    boolean that_present_serviceName = true && that.isSetServiceName();
    if (this_present_serviceName || that_present_serviceName) {
      if (!(this_present_serviceName && that_present_serviceName))
        return false;
      if (!TBaseHelper.equalsNobinary(this.serviceName, that.serviceName))
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!TBaseHelper.equalsNobinary(this.location, that.location))
        return false;
    }

    boolean this_present_isLoggingNewKeysEnabled = true;
    boolean that_present_isLoggingNewKeysEnabled = true;
    if (this_present_isLoggingNewKeysEnabled || that_present_isLoggingNewKeysEnabled) {
      if (!(this_present_isLoggingNewKeysEnabled && that_present_isLoggingNewKeysEnabled))
        return false;
      if (!TBaseHelper.equalsNobinary(this.isLoggingNewKeysEnabled, that.isLoggingNewKeysEnabled))
        return false;
    }

    boolean this_present_shardMap = true && this.isSetShardMap();
    boolean that_present_shardMap = true && that.isSetShardMap();
    if (this_present_shardMap || that_present_shardMap) {
      if (!(this_present_shardMap && that_present_shardMap))
        return false;
      if (!TBaseHelper.equalsNobinary(this.shardMap, that.shardMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ServiceMap other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetServiceName()).compareTo(other.isSetServiceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(serviceName, other.serviceName);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(other.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(location, other.location);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetIsLoggingNewKeysEnabled()).compareTo(other.isSetIsLoggingNewKeysEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(isLoggingNewKeysEnabled, other.isLoggingNewKeysEnabled);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetShardMap()).compareTo(other.isSetShardMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(shardMap, other.shardMap);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case SERVICENAME:
          if (field.type == TType.STRING) {
            this.serviceName = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LOCATION:
          if (field.type == TType.STRING) {
            this.location = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ISLOGGINGNEWKEYSENABLED:
          if (field.type == TType.BOOL) {
            this.isLoggingNewKeysEnabled = iprot.readBool();
            setIsLoggingNewKeysEnabledIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SHARDMAP:
          if (field.type == TType.LIST) {
            {
              TList _list36 = iprot.readListBegin();
              this.shardMap = new ArrayList<ShardInfo>(Math.max(0, _list36.size));
              for (int _i37 = 0; 
                   (_list36.size < 0) ? iprot.peekList() : (_i37 < _list36.size); 
                   ++_i37)
              {
                ShardInfo _elem38;
                _elem38 = new ShardInfo();
                _elem38.read(iprot);
                this.shardMap.add(_elem38);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.serviceName != null) {
      oprot.writeFieldBegin(SERVICE_NAME_FIELD_DESC);
      oprot.writeString(this.serviceName);
      oprot.writeFieldEnd();
    }
    if (this.location != null) {
      oprot.writeFieldBegin(LOCATION_FIELD_DESC);
      oprot.writeString(this.location);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(IS_LOGGING_NEW_KEYS_ENABLED_FIELD_DESC);
    oprot.writeBool(this.isLoggingNewKeysEnabled);
    oprot.writeFieldEnd();
    if (this.shardMap != null) {
      oprot.writeFieldBegin(SHARD_MAP_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.shardMap.size()));
        for (ShardInfo _iter39 : this.shardMap)        {
          _iter39.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("ServiceMap");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("serviceName");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getServiceName() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getServiceName(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("location");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getLocation() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getLocation(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("isLoggingNewKeysEnabled");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. isIsLoggingNewKeysEnabled(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("shardMap");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getShardMap() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getShardMap(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

