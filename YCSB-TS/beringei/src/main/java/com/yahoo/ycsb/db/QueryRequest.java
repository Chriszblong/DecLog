package com.yahoo.ycsb.db; /**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class QueryRequest implements TBase, java.io.Serializable, Cloneable, Comparable<QueryRequest> {
  private static final TStruct STRUCT_DESC = new TStruct("QueryRequest");
  private static final TField PANEL_ID_FIELD_DESC = new TField("panelId", TType.I32, (short)1);
  private static final TField RANGE_FIELD_DESC = new TField("range", TType.STRUCT, (short)2);
  private static final TField RANGE_RAW_FIELD_DESC = new TField("rangeRaw", TType.STRUCT, (short)3);
  private static final TField INTERVAL_FIELD_DESC = new TField("interval", TType.STRING, (short)4);
  private static final TField INTERVAL_MS_FIELD_DESC = new TField("intervalMs", TType.I32, (short)5);
  private static final TField TARGETS_FIELD_DESC = new TField("targets", TType.LIST, (short)6);
  private static final TField FORMAT_FIELD_DESC = new TField("format", TType.STRING, (short)7);
  private static final TField MAX_DATA_POINTS_FIELD_DESC = new TField("maxDataPoints", TType.I32, (short)8);

  public int panelId;
  public QueryRange range;
  public QueryRawRange rangeRaw;
  public String interval;
  public int intervalMs;
  public List<QueryTarget> targets;
  public String format;
  public int maxDataPoints;
  public static final int PANELID = 1;
  public static final int RANGE = 2;
  public static final int RANGERAW = 3;
  public static final int INTERVAL = 4;
  public static final int INTERVALMS = 5;
  public static final int TARGETS = 6;
  public static final int FORMAT = 7;
  public static final int MAXDATAPOINTS = 8;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __PANELID_ISSET_ID = 0;
  private static final int __INTERVALMS_ISSET_ID = 1;
  private static final int __MAXDATAPOINTS_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(PANELID, new FieldMetaData("panelId", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(RANGE, new FieldMetaData("range", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, QueryRange.class)));
    tmpMetaDataMap.put(RANGERAW, new FieldMetaData("rangeRaw", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, QueryRawRange.class)));
    tmpMetaDataMap.put(INTERVAL, new FieldMetaData("interval", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(INTERVALMS, new FieldMetaData("intervalMs", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(TARGETS, new FieldMetaData("targets", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, QueryTarget.class))));
    tmpMetaDataMap.put(FORMAT, new FieldMetaData("format", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(MAXDATAPOINTS, new FieldMetaData("maxDataPoints", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(QueryRequest.class, metaDataMap);
  }

  public QueryRequest() {
  }

  public QueryRequest(
    int panelId,
    QueryRange range,
    QueryRawRange rangeRaw,
    String interval,
    int intervalMs,
    List<QueryTarget> targets,
    String format,
    int maxDataPoints)
  {
    this();
    this.panelId = panelId;
    setPanelIdIsSet(true);
    this.range = range;
    this.rangeRaw = rangeRaw;
    this.interval = interval;
    this.intervalMs = intervalMs;
    setIntervalMsIsSet(true);
    this.targets = targets;
    this.format = format;
    this.maxDataPoints = maxDataPoints;
    setMaxDataPointsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryRequest(QueryRequest other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.panelId = TBaseHelper.deepCopy(other.panelId);
    if (other.isSetRange()) {
      this.range = TBaseHelper.deepCopy(other.range);
    }
    if (other.isSetRangeRaw()) {
      this.rangeRaw = TBaseHelper.deepCopy(other.rangeRaw);
    }
    if (other.isSetInterval()) {
      this.interval = TBaseHelper.deepCopy(other.interval);
    }
    this.intervalMs = TBaseHelper.deepCopy(other.intervalMs);
    if (other.isSetTargets()) {
      this.targets = TBaseHelper.deepCopy(other.targets);
    }
    if (other.isSetFormat()) {
      this.format = TBaseHelper.deepCopy(other.format);
    }
    this.maxDataPoints = TBaseHelper.deepCopy(other.maxDataPoints);
  }

  public QueryRequest deepCopy() {
    return new QueryRequest(this);
  }

  @Deprecated
  public QueryRequest clone() {
    return new QueryRequest(this);
  }

  public int  getPanelId() {
    return this.panelId;
  }

  public QueryRequest setPanelId(int panelId) {
    this.panelId = panelId;
    setPanelIdIsSet(true);
    return this;
  }

  public void unsetPanelId() {
    __isset_bit_vector.clear(__PANELID_ISSET_ID);
  }

  // Returns true if field panelId is set (has been assigned a value) and false otherwise
  public boolean isSetPanelId() {
    return __isset_bit_vector.get(__PANELID_ISSET_ID);
  }

  public void setPanelIdIsSet(boolean value) {
    __isset_bit_vector.set(__PANELID_ISSET_ID, value);
  }

  public QueryRange  getRange() {
    return this.range;
  }

  public QueryRequest setRange(QueryRange range) {
    this.range = range;
    return this;
  }

  public void unsetRange() {
    this.range = null;
  }

  // Returns true if field range is set (has been assigned a value) and false otherwise
  public boolean isSetRange() {
    return this.range != null;
  }

  public void setRangeIsSet(boolean value) {
    if (!value) {
      this.range = null;
    }
  }

  public QueryRawRange  getRangeRaw() {
    return this.rangeRaw;
  }

  public QueryRequest setRangeRaw(QueryRawRange rangeRaw) {
    this.rangeRaw = rangeRaw;
    return this;
  }

  public void unsetRangeRaw() {
    this.rangeRaw = null;
  }

  // Returns true if field rangeRaw is set (has been assigned a value) and false otherwise
  public boolean isSetRangeRaw() {
    return this.rangeRaw != null;
  }

  public void setRangeRawIsSet(boolean value) {
    if (!value) {
      this.rangeRaw = null;
    }
  }

  public String  getInterval() {
    return this.interval;
  }

  public QueryRequest setInterval(String interval) {
    this.interval = interval;
    return this;
  }

  public void unsetInterval() {
    this.interval = null;
  }

  // Returns true if field interval is set (has been assigned a value) and false otherwise
  public boolean isSetInterval() {
    return this.interval != null;
  }

  public void setIntervalIsSet(boolean value) {
    if (!value) {
      this.interval = null;
    }
  }

  public int  getIntervalMs() {
    return this.intervalMs;
  }

  public QueryRequest setIntervalMs(int intervalMs) {
    this.intervalMs = intervalMs;
    setIntervalMsIsSet(true);
    return this;
  }

  public void unsetIntervalMs() {
    __isset_bit_vector.clear(__INTERVALMS_ISSET_ID);
  }

  // Returns true if field intervalMs is set (has been assigned a value) and false otherwise
  public boolean isSetIntervalMs() {
    return __isset_bit_vector.get(__INTERVALMS_ISSET_ID);
  }

  public void setIntervalMsIsSet(boolean value) {
    __isset_bit_vector.set(__INTERVALMS_ISSET_ID, value);
  }

  public List<QueryTarget>  getTargets() {
    return this.targets;
  }

  public QueryRequest setTargets(List<QueryTarget> targets) {
    this.targets = targets;
    return this;
  }

  public void unsetTargets() {
    this.targets = null;
  }

  // Returns true if field targets is set (has been assigned a value) and false otherwise
  public boolean isSetTargets() {
    return this.targets != null;
  }

  public void setTargetsIsSet(boolean value) {
    if (!value) {
      this.targets = null;
    }
  }

  public String  getFormat() {
    return this.format;
  }

  public QueryRequest setFormat(String format) {
    this.format = format;
    return this;
  }

  public void unsetFormat() {
    this.format = null;
  }

  // Returns true if field format is set (has been assigned a value) and false otherwise
  public boolean isSetFormat() {
    return this.format != null;
  }

  public void setFormatIsSet(boolean value) {
    if (!value) {
      this.format = null;
    }
  }

  public int  getMaxDataPoints() {
    return this.maxDataPoints;
  }

  public QueryRequest setMaxDataPoints(int maxDataPoints) {
    this.maxDataPoints = maxDataPoints;
    setMaxDataPointsIsSet(true);
    return this;
  }

  public void unsetMaxDataPoints() {
    __isset_bit_vector.clear(__MAXDATAPOINTS_ISSET_ID);
  }

  // Returns true if field maxDataPoints is set (has been assigned a value) and false otherwise
  public boolean isSetMaxDataPoints() {
    return __isset_bit_vector.get(__MAXDATAPOINTS_ISSET_ID);
  }

  public void setMaxDataPointsIsSet(boolean value) {
    __isset_bit_vector.set(__MAXDATAPOINTS_ISSET_ID, value);
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case PANELID:
      if (value == null) {
        unsetPanelId();
      } else {
        setPanelId((Integer)value);
      }
      break;

    case RANGE:
      if (value == null) {
        unsetRange();
      } else {
        setRange((QueryRange)value);
      }
      break;

    case RANGERAW:
      if (value == null) {
        unsetRangeRaw();
      } else {
        setRangeRaw((QueryRawRange)value);
      }
      break;

    case INTERVAL:
      if (value == null) {
        unsetInterval();
      } else {
        setInterval((String)value);
      }
      break;

    case INTERVALMS:
      if (value == null) {
        unsetIntervalMs();
      } else {
        setIntervalMs((Integer)value);
      }
      break;

    case TARGETS:
      if (value == null) {
        unsetTargets();
      } else {
        setTargets((List<QueryTarget>)value);
      }
      break;

    case FORMAT:
      if (value == null) {
        unsetFormat();
      } else {
        setFormat((String)value);
      }
      break;

    case MAXDATAPOINTS:
      if (value == null) {
        unsetMaxDataPoints();
      } else {
        setMaxDataPoints((Integer)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case PANELID:
      return new Integer(getPanelId());

    case RANGE:
      return getRange();

    case RANGERAW:
      return getRangeRaw();

    case INTERVAL:
      return getInterval();

    case INTERVALMS:
      return new Integer(getIntervalMs());

    case TARGETS:
      return getTargets();

    case FORMAT:
      return getFormat();

    case MAXDATAPOINTS:
      return new Integer(getMaxDataPoints());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case PANELID:
      return isSetPanelId();
    case RANGE:
      return isSetRange();
    case RANGERAW:
      return isSetRangeRaw();
    case INTERVAL:
      return isSetInterval();
    case INTERVALMS:
      return isSetIntervalMs();
    case TARGETS:
      return isSetTargets();
    case FORMAT:
      return isSetFormat();
    case MAXDATAPOINTS:
      return isSetMaxDataPoints();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryRequest)
      return this.equals((QueryRequest)that);
    return false;
  }

  public boolean equals(QueryRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_panelId = true;
    boolean that_present_panelId = true;
    if (this_present_panelId || that_present_panelId) {
      if (!(this_present_panelId && that_present_panelId))
        return false;
      if (!TBaseHelper.equalsNobinary(this.panelId, that.panelId))
        return false;
    }

    boolean this_present_range = true && this.isSetRange();
    boolean that_present_range = true && that.isSetRange();
    if (this_present_range || that_present_range) {
      if (!(this_present_range && that_present_range))
        return false;
      if (!TBaseHelper.equalsNobinary(this.range, that.range))
        return false;
    }

    boolean this_present_rangeRaw = true && this.isSetRangeRaw();
    boolean that_present_rangeRaw = true && that.isSetRangeRaw();
    if (this_present_rangeRaw || that_present_rangeRaw) {
      if (!(this_present_rangeRaw && that_present_rangeRaw))
        return false;
      if (!TBaseHelper.equalsNobinary(this.rangeRaw, that.rangeRaw))
        return false;
    }

    boolean this_present_interval = true && this.isSetInterval();
    boolean that_present_interval = true && that.isSetInterval();
    if (this_present_interval || that_present_interval) {
      if (!(this_present_interval && that_present_interval))
        return false;
      if (!TBaseHelper.equalsNobinary(this.interval, that.interval))
        return false;
    }

    boolean this_present_intervalMs = true;
    boolean that_present_intervalMs = true;
    if (this_present_intervalMs || that_present_intervalMs) {
      if (!(this_present_intervalMs && that_present_intervalMs))
        return false;
      if (!TBaseHelper.equalsNobinary(this.intervalMs, that.intervalMs))
        return false;
    }

    boolean this_present_targets = true && this.isSetTargets();
    boolean that_present_targets = true && that.isSetTargets();
    if (this_present_targets || that_present_targets) {
      if (!(this_present_targets && that_present_targets))
        return false;
      if (!TBaseHelper.equalsNobinary(this.targets, that.targets))
        return false;
    }

    boolean this_present_format = true && this.isSetFormat();
    boolean that_present_format = true && that.isSetFormat();
    if (this_present_format || that_present_format) {
      if (!(this_present_format && that_present_format))
        return false;
      if (!TBaseHelper.equalsNobinary(this.format, that.format))
        return false;
    }

    boolean this_present_maxDataPoints = true;
    boolean that_present_maxDataPoints = true;
    if (this_present_maxDataPoints || that_present_maxDataPoints) {
      if (!(this_present_maxDataPoints && that_present_maxDataPoints))
        return false;
      if (!TBaseHelper.equalsNobinary(this.maxDataPoints, that.maxDataPoints))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(QueryRequest other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPanelId()).compareTo(other.isSetPanelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(panelId, other.panelId);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetRange()).compareTo(other.isSetRange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(range, other.range);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetRangeRaw()).compareTo(other.isSetRangeRaw());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(rangeRaw, other.rangeRaw);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetInterval()).compareTo(other.isSetInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(interval, other.interval);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetIntervalMs()).compareTo(other.isSetIntervalMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(intervalMs, other.intervalMs);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetTargets()).compareTo(other.isSetTargets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(targets, other.targets);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetFormat()).compareTo(other.isSetFormat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(format, other.format);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetMaxDataPoints()).compareTo(other.isSetMaxDataPoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(maxDataPoints, other.maxDataPoints);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case PANELID:
          if (field.type == TType.I32) {
            this.panelId = iprot.readI32();
            setPanelIdIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RANGE:
          if (field.type == TType.STRUCT) {
            this.range = new QueryRange();
            this.range.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RANGERAW:
          if (field.type == TType.STRUCT) {
            this.rangeRaw = new QueryRawRange();
            this.rangeRaw.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case INTERVAL:
          if (field.type == TType.STRING) {
            this.interval = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case INTERVALMS:
          if (field.type == TType.I32) {
            this.intervalMs = iprot.readI32();
            setIntervalMsIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TARGETS:
          if (field.type == TType.LIST) {
            {
              TList _list0 = iprot.readListBegin();
              this.targets = new ArrayList<QueryTarget>(Math.max(0, _list0.size));
              for (int _i1 = 0; 
                   (_list0.size < 0) ? iprot.peekList() : (_i1 < _list0.size); 
                   ++_i1)
              {
                QueryTarget _elem2;
                _elem2 = new QueryTarget();
                _elem2.read(iprot);
                this.targets.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FORMAT:
          if (field.type == TType.STRING) {
            this.format = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MAXDATAPOINTS:
          if (field.type == TType.I32) {
            this.maxDataPoints = iprot.readI32();
            setMaxDataPointsIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(PANEL_ID_FIELD_DESC);
    oprot.writeI32(this.panelId);
    oprot.writeFieldEnd();
    if (this.range != null) {
      oprot.writeFieldBegin(RANGE_FIELD_DESC);
      this.range.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.rangeRaw != null) {
      oprot.writeFieldBegin(RANGE_RAW_FIELD_DESC);
      this.rangeRaw.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.interval != null) {
      oprot.writeFieldBegin(INTERVAL_FIELD_DESC);
      oprot.writeString(this.interval);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(INTERVAL_MS_FIELD_DESC);
    oprot.writeI32(this.intervalMs);
    oprot.writeFieldEnd();
    if (this.targets != null) {
      oprot.writeFieldBegin(TARGETS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.targets.size()));
        for (QueryTarget _iter3 : this.targets)        {
          _iter3.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.format != null) {
      oprot.writeFieldBegin(FORMAT_FIELD_DESC);
      oprot.writeString(this.format);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(MAX_DATA_POINTS_FIELD_DESC);
    oprot.writeI32(this.maxDataPoints);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("QueryRequest");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("panelId");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getPanelId(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("range");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getRange() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getRange(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("rangeRaw");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getRangeRaw() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getRangeRaw(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("interval");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getInterval() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getInterval(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("intervalMs");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getIntervalMs(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("targets");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getTargets() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getTargets(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("format");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getFormat() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getFormat(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("maxDataPoints");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getMaxDataPoints(), indent + 1, prettyPrint));
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

