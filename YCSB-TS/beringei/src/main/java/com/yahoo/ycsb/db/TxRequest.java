package com.yahoo.ycsb.db; /**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Collections;

import com.facebook.thrift.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class TxRequest implements TBase, java.io.Serializable, Cloneable, Comparable<TxRequest> {
  private static final TStruct STRUCT_DESC = new TStruct("TxRequest");
  private static final TField OP_FIELD_DESC = new TField("op", TType.LIST, (short)1);

  public List<TxRequestOp> op;
  public static final int OP = 1;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(OP, new FieldMetaData("op", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, TxRequestOp.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(TxRequest.class, metaDataMap);
  }

  public TxRequest() {
  }

  public TxRequest(
    List<TxRequestOp> op)
  {
    this();
    this.op = op;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TxRequest(TxRequest other) {
    if (other.isSetOp()) {
      this.op = TBaseHelper.deepCopy(other.op);
    }
  }

  public TxRequest deepCopy() {
    return new TxRequest(this);
  }

  @Deprecated
  public TxRequest clone() {
    return new TxRequest(this);
  }

  public List<TxRequestOp>  getOp() {
    return this.op;
  }

  public TxRequest setOp(List<TxRequestOp> op) {
    this.op = op;
    return this;
  }

  public void unsetOp() {
    this.op = null;
  }

  // Returns true if field op is set (has been assigned a value) and false otherwise
  public boolean isSetOp() {
    return this.op != null;
  }

  public void setOpIsSet(boolean value) {
    if (!value) {
      this.op = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case OP:
      if (value == null) {
        unsetOp();
      } else {
        setOp((List<TxRequestOp>)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case OP:
      return getOp();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case OP:
      return isSetOp();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TxRequest)
      return this.equals((TxRequest)that);
    return false;
  }

  public boolean equals(TxRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_op = true && this.isSetOp();
    boolean that_present_op = true && that.isSetOp();
    if (this_present_op || that_present_op) {
      if (!(this_present_op && that_present_op))
        return false;
      if (!TBaseHelper.equalsNobinary(this.op, that.op))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TxRequest other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOp()).compareTo(other.isSetOp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(op, other.op);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case OP:
          if (field.type == TType.LIST) {
            {
              TList _list88 = iprot.readListBegin();
              this.op = new ArrayList<TxRequestOp>(Math.max(0, _list88.size));
              for (int _i89 = 0; 
                   (_list88.size < 0) ? iprot.peekList() : (_i89 < _list88.size); 
                   ++_i89)
              {
                TxRequestOp _elem90;
                _elem90 = new TxRequestOp();
                _elem90.read(iprot);
                this.op.add(_elem90);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.op != null) {
      oprot.writeFieldBegin(OP_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.op.size()));
        for (TxRequestOp _iter91 : this.op)        {
          _iter91.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("TxRequest");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("op");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getOp() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getOp(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

